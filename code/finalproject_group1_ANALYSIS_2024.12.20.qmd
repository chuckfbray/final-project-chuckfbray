---
title: Figure and analysis production
date: 2024-12-20
output-dir: "docs"
---

```{r, loaddat}
#| include: false
#| message: false
#| warning: false

library(magrittr)
library(tidyverse)
library(tidyr)
library(dplyr)
library(data.table)
library(ggplot2)
library(zoo)

dat <- readRDS("../data/cleandat.RDS")

```


## Part I. Divide the pandemic period, January 2020 to December 2024 into waves. Justify your choice with data visualization.

```{r, f1}
#| message: false
#| warning: false


## identify local maxima and minima in 9-week (~2 month) windows. THEN, assign waves dynamically: based on 5+ regions having minima within 5 weeks of each other (or roughly half the sliding time window)
wavedat <- dat |>
  dplyr::group_by(date, region_name) |>
  dplyr::summarise(cases=sum(cases,na.rm = T),
            hosp=sum(hosp,na.rm = T),
            deaths=sum(deaths,na.rm = T),
            population=max(population)) |>
  ungroup() |>
  mutate(cases = cases/population*100000,
         hosp = hosp/population*100000,
         deaths = deaths/population*100000) |>
  dplyr::select(date, cases, hosp, deaths, region_name) |>
  # smooth deaths per cases across regions...
  pivot_longer(c(cases, deaths, hosp), values_to = "Rate per 100,000 population", names_to = "outcome") |>
  mutate(outcome=str_to_title(outcome),
         outcome=ifelse(outcome=="Hosp","Hospitalizations",outcome)) |>
  ## get local minima/maxima
  arrange(region_name, outcome, date) |>
  dplyr::group_by(region_name, outcome) |>
  # look for min/max in 9-week windows
  mutate(locmin = ifelse(rollapply(`Rate per 100,000 population`, 9, function(x) which.min(x)==5, fill=NA), 
                         `Rate per 100,000 population`, NA),
         locmax = ifelse(rollapply(`Rate per 100,000 population`, 9, function(x) which.max(x)==5, fill=NA),
                         `Rate per 100,000 population`, NA)) |>
  ungroup()


## dynamically define waves
wavedat <- wavedat |>
  arrange(outcome, date, region_name) |>
  # gather number of distinct regions reporting each week
  dplyr::group_by(date,outcome) |>
  mutate(nregions = n_distinct(region_name)) |>
  ungroup() |>
  dplyr::group_by(outcome) |>
  mutate(clustermins = ifelse(
                          as.numeric(rollapply(`locmin`, 50, function(x) sum(as.numeric(!is.na(x))) >= min(nregions)/2, fill=NA)),
                          date,
                          NA),                                                                         # 50 for 10 regions X 5 weeks
         transition = rollsum(as.numeric(!is.na(`clustermins`)), 50, fill=NA),
         transmax = ifelse(rollapply(transition, 50, function(x) which.max(x)==25, fill=NA), date, NA),
         transmax = as.Date(ifelse(row_number()==1, as.Date("2020-01-01"), transmax))#,
         ## get the last date, for use in creating colored rectangles indicating wave periods
         # lastdate = tidyr::fill(transmax, .direction="down")
         ) |>
  ungroup()


wavedat |> dplyr::rename(Region=region_name) |> filter(date>=as.Date("2020-03-01")) |>
  ggplot(aes(date, `Rate per 100,000 population`, color = Region)) +
  geom_line() +
  geom_vline(aes(xintercept=as.Date(transmax), y=0), color="red", linetype=3) +
  geom_point(aes(y=locmin), color="black") +
  geom_point(aes(y=locmax), color="black", shape=4) +
  facet_wrap(~outcome, nrow = 3, scales = "free_y") +
  scale_x_date(date_breaks = "3 months", date_labels ="%Y %b",
               limits = c(as.Date("2020-03-01"), as.Date("2024-12-01"))) +
  theme(axis.text.x = element_text(angle=90),
        legend.position = "top",
        legend.text = element_text(size=8)) +
  xlab("Date, weeks") +
  geom_label(aes(x=as.Date(transmax),
                 y=case_when(outcome=="Deaths"~35, outcome=="Cases"~6000, T~175),
                 label=as.Date(transmax)), size=2, color="black", check_overlap = TRUE,
             position = position_dodge()) +
  coord_cartesian(xlim=c(as.Date("2020-03-01"), as.Date("2024-12-01")))
  
  
  ## shade COVID-19 strain eras...
  # annotate("rect", xmin = as.Date("2020-01-01"), xmax = as.Date("2020-06-15"),
  #          ymin = -Inf, ymax = Inf, fill = "red", alpha = 0.2) +
  # annotate("rect", xmin = as.Date("2020-06-15"), xmax = as.Date("2021-05-30"),
  #          ymin = -Inf, ymax = Inf, fill = "darkorange", alpha = 0.2) +
  # annotate("rect", xmin = as.Date("2021-05-30"), xmax = as.Date("2021-11-30"),
  #          ymin = -Inf, ymax = Inf, fill = "maroon", alpha = 0.2) +
  # annotate("rect", xmin = as.Date("2021-11-30"), xmax = as.Date("2022-03-30"),
  #          ymin = -Inf, ymax = Inf, fill = "blue", alpha = 0.2) +
  # annotate("rect", xmin = as.Date("2022-03-30"), xmax = as.Date("2024-12-01"),
  #          ymin = -Inf, ymax = Inf, fill = "darkgreen", alpha = 0.2) +
  # xlab("Date, weeks")


### save plot
ggsave("../figs/Figure1.png", width=7, height=9)


## wave definitions
wavedat %<>% mutate(transmax = as.Date(transmax))

casewaves <- wavedat %>%
  dplyr::filter(!is.na(transmax) & transmax>as.Date("2020-03-01") & outcome=="Cases") %>%
  dplyr::select(transmax,outcome) %>%
  dplyr::mutate(begindate = lag(transmax, default=as.Date("2019-12-31"))+1) %>%
  dplyr::rename(enddate = transmax)

deathwaves <- wavedat %>%
  dplyr::filter(!is.na(transmax) & transmax>as.Date("2020-03-01") & outcome=="Deaths") %>%
  dplyr::select(transmax,outcome) %>%
  mutate(begindate = lag(transmax, default=as.Date("2019-12-31"))+1) %>%
  dplyr::rename(enddate = transmax)

hospwaves <- wavedat %>%
  dplyr::filter(!is.na(transmax) & transmax>as.Date("2020-03-01") & outcome=="Hospitalizations") %>%
  dplyr::select(transmax,outcome) %>%
  mutate(begindate = lag(transmax, default=as.Date("2019-12-31"))+1) %>%
  dplyr::rename(enddate = transmax)

waves <- rbind(casewaves,deathwaves,hospwaves)


## regional segmentation (based on variation in minima and maxima among regions, by wave)
variation_min <-
  wavedat %>%
  filter(!is.na(locmin)) %>%
  dplyr::select(region_name,date,outcome) %>% unique() %>%
  full_join(waves, relationship="many-to-many") %>%
  mutate(date=as.numeric(date)) %>%
  # identify closest end/begin dates that minima congregate around
  mutate(reldate = date-as.numeric(enddate)) %>%
  dplyr::group_by(region_name,date,outcome) %>% mutate(mindate= min(abs(reldate))) %>% ungroup() %>%
  filter(mindate==abs(reldate) & date>as.Date("2020-04-01"))

variation_max <-
  wavedat %>%
  filter(!is.na(locmax)) %>%
  dplyr::select(region_name,date,outcome) %>% unique() %>%
  full_join(waves, relationship="many-to-many") %>%
  dplyr::filter(between(as.numeric(date), as.numeric(begindate), as.numeric(enddate))) %>%
  mutate(date=as.numeric(date))

waveminvar <- variation_min %>% dplyr::group_by(outcome,begindate,enddate) %>% dplyr::summarise(devdate=sd(date)) %>% ungroup()
wavemaxvar <- variation_max %>% dplyr::group_by(outcome,begindate,enddate) %>% dplyr::summarise(devdate=sd(date)) %>% ungroup()



### save table defining wave dates
# fwrite("../figs/Table1.csv")

### also save regional wave variability boxplots...

# boxplots
ggplot(variation_min %>% dplyr::filter(outcome!="Deaths" & begindate < as.Date("2022-10-30")),
       aes(group=begindate, x=factor(begindate), y=abs(reldate))) +
  geom_boxplot() +
  facet_grid(~outcome, scales = "free") +
  theme(axis.text.x = element_text(angle=90)) +
  xlab("Wave starting date") + ylab("Number of days removed from inter-regional median wave end date")

ggsave("../figs/Figure2.png", width=6, height=8)



## Determine degrees of change by date, and inflection points
# changedat <-
#   dat |> 
#  dplyr::group_by(date, region) |>
#  dplyr::summarise(cases=sum(cases,na.rm = T),
#             hosp=sum(hosp,na.rm = T),
#             deaths=sum(deaths,na.rm = T),
#             population=sum(population)) |>
#   ungroup() |>
#   mutate(cases = cases/population*100000,
#   hosp = hosp/population*100000,
#   deaths = deaths/population*100000) |>
#   dplyr::select(date, cases, hosp, deaths, region) |>
#   # smooth deaths per cases across regions...
#   pivot_longer(c(cases, deaths, hosp), values_to = "Rate per 100,000 population",
#                names_to = "outcome") |>
#   mutate(outcome=str_to_title(outcome),
#          outcome=ifelse(outcome=="Hosp", "Hospitalizations", outcome)) |>
#   # xxx
#   arrange(region, outcome, date) |>
#   dplyr::group_by(region, outcome) |>
#   mutate(rowdate = row_number(),
#          pctchange = ifelse(row_number()>1 & lag(`Rate per 100,000 population`)>0,
#                                    (`Rate per 100,000 population` - lag(`Rate per 100,000 population`))/
#                                      lag(`Rate per 100,000 population`),
#                                    0),
#          pctchange2 = ifelse(row_number()>2 & lag(pctchange)>0,
#                                    (pctchange - lag(pctchange))/
#                                      lag(pctchange),
#                                    0)
#          ) |>
#   ungroup()

# make moving avg pct change and plot...
# changedat |>
#   # % change
#   dplyr::group_by(region, outcome) |> mutate(pctchange_roll = zoo::rollmean(pctchange, k=3, fill=NA)) |> ungroup() |>
#   ggplot(aes(date, pctchange_roll, color = region)) +
#   geom_line() +
#   facet_wrap(~outcome, nrow = 3, scales = "free_y") +
#   scale_x_date(date_breaks = "3 months", date_labels ="%Y %b") +
#   theme(axis.text.x = element_text(angle=90)) +
#   ## shade COVID-19 strain eras...
#   annotate("rect", xmin = as.Date("2020-01-01"), xmax = as.Date("2020-06-15"),
#            ymin = -Inf, ymax = Inf, fill = "red", alpha = 0.2) +
#   annotate("rect", xmin = as.Date("2020-06-15"), xmax = as.Date("2021-05-30"),
#            ymin = -Inf, ymax = Inf, fill = "darkorange", alpha = 0.2) +
#   annotate("rect", xmin = as.Date("2021-05-30"), xmax = as.Date("2021-11-30"),
#            ymin = -Inf, ymax = Inf, fill = "maroon", alpha = 0.2) +
#   annotate("rect", xmin = as.Date("2021-11-30"), xmax = as.Date("2022-03-30"),
#            ymin = -Inf, ymax = Inf, fill = "blue", alpha = 0.2) +
#   annotate("rect", xmin = as.Date("2022-03-30"), xmax = as.Date("2024-12-31"),
#            ymin = -Inf, ymax = Inf, fill = "darkgreen", alpha = 0.2)  +
#   ylab("Percentage change in rate, 3-week rolling average") +
#   xlab("Date, weeks")
# 
# ggsave("../out/Figure2.png")


## tabulate overall nos by period... using Cases.
casewavedef <- variation_min %>% dplyr::filter(outcome=="Cases" & begindate<as.Date("2022-10-30")) %>%
  dplyr::rename(regional_min=date) %>%
  mutate(enddate = ifelse(begindate==max(begindate), as.Date("2024-12-31"), enddate)) %>%
  dplyr::select(region_name, begindate, enddate) %>%
  unique()

fwrite(casewavedef, "../figs/Table1.csv")

```


## Part II. For each period compute the deaths rates by state. Describe which states did better or worse during the different periods.

```{r, f2}
#| message: false
#| warning: false

## merge case wave starts/ends
statelevel <- dat %>% left_join(casewavedef, relationship="many-to-many") %>%
  dplyr::filter(between(as.numeric(date), as.numeric(begindate), as.numeric(enddate)))

## summarize state-level death rates, by wave.
statelevel_Deaths <-
  statelevel %>%
  group_by(state, state_name, begindate, enddate, region_name) %>%
  summarise(deathsum = sum(deaths,na.rm=T),
            meanpop = mean(population)) %>%
  ungroup() %>%
  mutate(deathrate = deathsum/meanpop)

## classify broader pandemic waves
statelevel_Deaths %<>%
  mutate(phase = case_when(year(begindate) < 2021 ~ "2020 waves",
                           year(begindate) < 2022 & year(begindate) > 2020 ~ "2021 waves",
                           T ~ "Post-acute")
  )


## visualize states, grouping by region and wave
library(Hmisc)

statelevel_Deaths %>%
    ggplot(aes(region_name, deathrate*100000, group = region_name)) +
    geom_jitter(aes(color = region_name),
                size = 4,
                alpha = 0.8
    ) +
    stat_summary(
        fun.data = "mean_sdl", fun.args = list(mult = 1)
    ) +
    # scale_color_manual(values = c("darkorange", "purple")) +
    facet_wrap(~begindate, ncol=4) +
    theme(
        panel.border = element_rect(color = "black", fill = NA, size = 1),
        panel.spacing.x = unit(0, "pt"),
        strip.placement = "outside",
        strip.background.x = element_blank(),
        axis.text.x = element_blank(),
        legend.title = element_blank()
    ) + ylab("Deaths per 100,000 population") + xlab("US geographical region")

ggsave("../figs/Figure2.png", width=6, height=8)


### rank states by death rate, for each of the seven waves
statelevel_Deaths %<>%
  arrange(begindate, -deathrate)

statelevel_Deaths %<>%
  group_by(begindate) %>% mutate(StateRank = row_number()) %>% ungroup()

statelevel_Deaths_wide <-
  statelevel_Deaths %>% pivot_wider(id_cols=StateRank, names_from = begindate, values_from = c("state","deathrate"))

fwrite(statelevel_Deaths_wide, "../figs/Table2.csv")

```


## Part III. Describe if COVID-19 became less or more virulent across the different periods.

```{r, f3}
#| message: false
#| warning: false


## deaths and hospitalizations - each wave compared to cases
statelevel_Deaths_Hosps_Cases <-
  statelevel %>%
  group_by(state, state_name, begindate, enddate, region_name) %>%
  summarise(deathsum = sum(deaths,na.rm=T),
            casesum = sum(cases,na.rm=T),
            hospsum = sum(hosp,na.rm=T),
            meanpop = mean(population)) %>%
  ungroup() %>%
  mutate(deathrate = deathsum/meanpop,
         caserate = casesum/meanpop,
         hosprate = hospsum/meanpop,
         
         deathpercase = deathrate / caserate,
         deathperhosp = deathrate / hosprate,
         hosppercase = hosprate / caserate)


regionlevel_Deaths_Hosps_Cases <-
  statelevel %>%
  group_by(region_name, begindate, enddate) %>%
  summarise(deathsum = sum(deaths,na.rm=T),
            casesum = sum(cases,na.rm=T),
            hospsum = sum(hosp,na.rm=T),
            meanpop = mean(population)) %>%
  ungroup() %>%
  mutate(deathrate = deathsum/meanpop,
         caserate = casesum/meanpop,
         hosprate = hospsum/meanpop,
         
         deathpercase = deathrate / caserate,
         deathperhosp = deathrate / hosprate,
         hosppercase = hosprate / caserate)


###
fwrite(xxx, "../figs/Table3.csv")

```
